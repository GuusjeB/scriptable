// Variables used by Scriptable.
// These must be at the very top of the file. Do not edit.
// icon-color: blue; icon-glyph: subway;
// ************************************************

function toIsoString(date) {
  var tzo = -date.getTimezoneOffset(),
      dif = tzo >= 0 ? '+' : '-',
      pad = function(num) {
          return (num < 10 ? '0' : '') + num;
      };

  return date.getFullYear() +
      '-' + pad(date.getMonth() + 1) +
      '-' + pad(date.getDate()) +
      'T' + pad(date.getHours()) +
      ':' + pad(date.getMinutes()) +
      ':' + pad(date.getSeconds()) +
      dif + pad(Math.floor(Math.abs(tzo) / 60)) +
      ':' + pad(Math.abs(tzo) % 60);
}

const now = new Date(Date.now());
const referenceMoment = now.setHours(10);
const MORNING = true
const UIC_UT = '8400621'
const UIC_ASD = '8400058'

if (now > referenceMoment) {
  MORNING = false
  const station = "Utrecht Centraal"
  const FROM_UIC = UIC_UT
  const TO_UIC = UIC_ASD
  const departureDateTimeArg = ''
} else {
  const station = "Amsterdam Centraal"
  const FROM_UIC = UIC_ASD
  const TO_UIC = UIC_UT
  const departureDateTimeArg = "&dateTime=" + toIsoString(now.setHours(8))
}

//Set for Debug in App
//const station = "Utrecht Centraal"
// const station = "Amsterdam Centraal"
//const station = args.widgetParameter


// Get departures NS trains
const subscription_key = ""
let req = new Request("https://gateway.apiportal.ns.nl/reisinformatie-api/api/v3/trips?originUicCode=" + FROM_UIC + "&destinationUicCode=" + TO_UIC + departureDateTimeArg);
req.method = "get";
req.headers={"Ocp-Apim-Subscription-Key": subscription_key}
const response = await req.loadJSON();
const trips = response.trips

const destinations = [];
const trackNumbers = [];
const departureTimes = [];
const delays = [];
let IC_COUNT = 0

for (var index in trips) {

    if (trips[index].legs[0].product.categoryCode != 'IC') { continue; }
    // Keep track of number of trips with IC
    IC_COUNT = IC_COUNT + 1;

    // Always show planned datetime if both are present
    //  If both are present and they differ: show delayed minutes
    if ('actualDateTime' in trips[index].legs[0].origin) {
        const actualDateTime = new Date(trips[index].legs[0].origin.actualDateTime)
        
        // if both planned and actual time are present: calculate possible delay
        if ('plannedDateTime' in trips[index].legs[0].origin) {
          const plannedDateTime = new Date(trips[index].legs[0].origin.plannedDateTime)
          departureTimes.push(actualDateTime.toString())

          // Calculate possible delay
          const delay = Math.ceil((actualDateTime -  plannedDateTime) / 60000)

          // If there is a delay, store it in array
          if (delay > 0) {delays.push('+ ' + delay.toString()) 
          } else {delays.push('')}
        
        // If only actualDateTime is present
        } else {
          departureTimes.push(actualDateTime.toString())
          delays.push('')
        }
    } else {
         // If only plannedDateTime is present
         if ('plannedDateTime' in trips[index].legs[0].origin) {
            const plannedDateTime = new Date(trips[index].legs[0].origin.plannedDateTime)
            departureTimes.push(plannedDateTime.toString())
            delays.push('')
         // No departure time is present
         } else {
            departureTimes.push("")
            console.log("missing departureTime for trip " + index)
            delays.push('')
         }
    }

    // Check for either actualTrack or plannedTrack (prefer first)
    if ('actualTrack' in trips[index].legs[0].origin) {
        trackNumbers.push(trips[index].legs[0].origin.actualTrack.toString())
      } else {
         if ('plannedTrack' in trips[index].legs[0].origin) {
            trackNumbers.push(trips[index].legs[0].origin.plannedTrack.toString())
         } else {
            trackNumbers.push("")
         }
    }
    destinations.push(trips[index].legs[0].destination.name.toString().replace('Centraal', 'Cs'))
  }




//Calculates Departure time
function calculateTimeOffset(times)
{
  return Math.ceil((Date.parse(times) - Date.now()) / 60000)
}

//Calculates Departure time
function timeOnly(times)
{
  const timestamp = new Date(times)
  let hours = (timestamp.getHours().toString().length > 1) ? timestamp.getHours().toString() : "0" + timestamp.getHours().toString()
  let minutes = (timestamp.getMinutes().toString().length > 1) ? timestamp.getMinutes().toString() : "0" + timestamp.getMinutes().toString()
  return hours + ':' + minutes
}


//Calculates expected departure incl. delay
function calculateDeparture (delay, time) {
  if (delay == undefined)
  {
    return time
  }
  else
  {
    return delay+time
  }
}

//Shorten text, if length exceeds space
function truncate(text, n = 22)
{
  return (text.length > n) ? text.substr(0, n-1) + '...' : text
}

// Returns string of last updated datetime
function createDateString()
{
  const now = new Date(Date.now())

  let day = (now.getDate().toString().length > 1) ? now.getDate().toString() : "0" + now.getDate().toString()
  let monthNumb = now.getMonth() + 1
  let month = (monthNumb.toString().length > 1) ? monthNumb.toString() : "0" + monthNumb.toString()
  let year = now.getFullYear().toString()
  let hours = (now.getHours().toString().length > 1) ? now.getHours().toString() : "0" + now.getHours().toString()
  let minutes = (now.getMinutes().toString().length > 1) ? now.getMinutes().toString() : "0" + now.getMinutes().toString()

  return "Updated: " + day + "." + month + "." + year + " - " + hours + ":" + minutes
}

const widgetSize = (config.widgetFamily ? config.widgetFamily : 'large');
const widget = await createWidget()

if (!config.runInWidget) {
  switch(widgetSize) {
    case 'small':
    await widget.presentSmall();
    break;

    case 'large':
    await widget.presentLarge();
    break;
    
    default:
    await widget.presentMedium();
  }
}

Script.setWidget(widget)

function createWidget() {

  let ITEMS_COUNT
  let HEADER_SIZE
  let COLUMN_HEIGHT
  let SPACING
  let PADDING
  let LOGO_SIZE
  let STATION_SIZE
  let DEPART_SIZE
  let TIME_SIZE
  let LOGO_FONT_SIZE
  let STATION_FONT_SIZE
  let DEPART_FONT_SIZE
  let TIME_FONT_SIZE
  let HEADLINE_FONT_SIZE
  let FOOTER_HEIGHT
  let FOOTER_FONT_SIZE

  if (widgetSize == 'small') {
    ITEMS_COUNT = 4
    HEADER_SIZE = 20
    COLUMN_HEIGHT = 15
    SPACING = 3
    PADDING = SPACING
    LOGO_SIZE = new Size(20, COLUMN_HEIGHT)
    STATION_SIZE = new Size(80, COLUMN_HEIGHT)
    DEPART_SIZE = new Size(20, COLUMN_HEIGHT)
    TIME_SIZE = new Size(20, COLUMN_HEIGHT)
    DELAY_SIZE = new Size(20, COLUMN_HEIGHT)
    LOGO_FONT_SIZE = 12
    STATION_FONT_SIZE = 14
    DEPART_FONT_SIZE = 12
    TIME_FONT_SIZE = 12
    DELAY_FONT_SIZE = 12
    HEADLINE_FONT_SIZE = 16
    FOOTER_HEIGHT = 20
    FOOTER_FONT_SIZE = 6
  } else if (widgetSize == 'medium') {
    ITEMS_COUNT = 3
    HEADER_SIZE = 25
    COLUMN_HEIGHT = 20
    SPACING = 3
    PADDING = SPACING
    LOGO_SIZE = new Size(35, COLUMN_HEIGHT)
    STATION_SIZE = new Size(80, COLUMN_HEIGHT)
    DEPART_SIZE = new Size(60, COLUMN_HEIGHT)
    TIME_SIZE = new Size(60, COLUMN_HEIGHT)
    DELAY_SIZE = new Size(20, COLUMN_HEIGHT)
    LOGO_FONT_SIZE = 14
    STATION_FONT_SIZE = 20
    DEPART_FONT_SIZE = 16
    TIME_FONT_SIZE = 16
    DELAY_FONT_SIZE = 16
    HEADLINE_FONT_SIZE = 24
    FOOTER_HEIGHT = 10
    FOOTER_FONT_SIZE = 8
  } else {
    ITEMS_COUNT = 6
    HEADER_SIZE = 20
    COLUMN_HEIGHT = 30
    SPACING = 5
    PADDING = SPACING
    LOGO_SIZE = new Size(35, COLUMN_HEIGHT)
    STATION_SIZE = new Size(85, COLUMN_HEIGHT)
    DEPART_SIZE = new Size(60, COLUMN_HEIGHT)
    TIME_SIZE = new Size(60, COLUMN_HEIGHT)
    DELAY_SIZE = new Size(40, COLUMN_HEIGHT)
    LOGO_FONT_SIZE = 14
    STATION_FONT_SIZE = 18
    DEPART_FONT_SIZE = 14
    TIME_FONT_SIZE = 14
    DELAY_FONT_SIZE = 12
    HEADLINE_FONT_SIZE = 24
    FOOTER_HEIGHT = 25
    FOOTER_FONT_SIZE = 8
  }

  // Widget
  const widget = new ListWidget();
  widget.backgroundColor = new Color("#4562a2")
  widget.setPadding(PADDING, PADDING, PADDING, PADDING);

  // Main stack
  const stack = widget.addStack();
  stack.layoutVertically();
  stack.centerAlignContent()

  // Top stack for station headline (=origin station)
  const topStack = stack.addStack();
  topStack.layoutVertically();
  //topStack.centerAlignContent()
  topStack.size = new Size(LOGO_SIZE.width + STATION_SIZE.width + DEPART_SIZE.width + TIME_SIZE.width + DELAY_SIZE.width + 2*SPACING, HEADER_SIZE);

  const stationName = topStack.addText(station.toString());
  stationName.textColor = Color.white();
  stationName.leftAlignText()
  stationName.font = Font.boldSystemFont(HEADLINE_FONT_SIZE)

  // Horizontal spacer under headline (station) string
  stack.addSpacer(8);

  // Items counts should exceed number of IC trips
  if (ITEMS_COUNT > IC_COUNT) {ITEMS_COUNT = IC_COUNT}

  for (let i = 0; i < ITEMS_COUNT; i++) {
    // Will be set up with 3 columns to show line, destination and departure time
    // left column contains line logos
    const bottomStack = stack.addStack();
    bottomStack.spacing = SPACING
    bottomStack.size = new Size(LOGO_SIZE.width + STATION_SIZE.width + DEPART_SIZE.width + TIME_SIZE.width + DELAY_SIZE.width + 2*SPACING, COLUMN_HEIGHT + 2*SPACING)
    bottomStack.layoutHorizontally();
    bottomStack.centerAlignContent()

    // Left column: indicates tracknumber
    const linestack = bottomStack.addStack();
    linestack.size = LOGO_SIZE
    linestack.centerAlignContent()
    linestack.backgroundColor = new Color("Yellow")
    let lineName = linestack.addText(trackNumbers[i])
    lineName.font = Font.boldSystemFont(LOGO_FONT_SIZE)
    lineName.textColor = Color.white()
    lineName.centerAlignText()
    lineName.minimumScaleFactor = 0.4
    
    // Second column: contains name of line direction
    const destinationStack = bottomStack.addStack();
    destinationStack.size = STATION_SIZE
    destinationStack.layoutVertically()
    destinationStack.centerAlignContent()
    let destinationName = destinationStack.addText(truncate(destinations[i]))
    destinationName.font = Font.lightSystemFont(STATION_FONT_SIZE)
    destinationName.textColor = Color.white()
    destinationName.leftAlignText()
    destinationName.minimumScaleFactor = 0.95
    
    // Fourth column shows minutes till depature
    const departureStack = bottomStack.addStack();
    departureStack.size = DEPART_SIZE
    departureStack.centerAlignContent()
    let departureOffset = departureStack.addText(calculateTimeOffset(departureTimes[i]).toString() + ' "')
    departureOffset.font = Font.boldSystemFont(DEPART_FONT_SIZE)
    departureOffset.textColor = Color.white()
    departureOffset.rightAlignText()
    departureOffset.minimumScaleFactor = 0.95

    // Third column adds departure time
    const timeStack = bottomStack.addStack();
    timeStack.size = TIME_SIZE
    timeStack.centerAlignContent()
    let departureTime = timeStack.addText(timeOnly(departureTimes[i]))
    departureTime.font = Font.lightSystemFont(TIME_FONT_SIZE)
    departureTime.textColor = Color.white()
    departureTime.rightAlignText()
    departureTime.minimumScaleFactor = 0.95

    // Most rIght column shows delayed minutes
    const delayStack = bottomStack.addStack();
    delayStack.size = DELAY_SIZE
    delayStack.centerAlignContent()
    let delayMinutes = timeStack.addText(delays[i])
    delayMinutes.font = Font.lightSystemFont(DELAY_FONT_SIZE)
    delayMinutes.textColor = Color.red()
    delayMinutes.rightAlignText()
    delayMinutes.minimumScaleFactor = 0.95
  }

  const updatedstack = stack.addStack();
  updatedstack.bottomAlignContent()
  updatedstack.size = new Size(LOGO_SIZE.width + STATION_SIZE.width + DEPART_SIZE.width + TIME_SIZE.width + DELAY_SIZE.width + 2*SPACING, FOOTER_HEIGHT)
  let lastUpdateTime = updatedstack.addText(createDateString())
  lastUpdateTime.font = Font.lightSystemFont(8)
  lastUpdateTime.textColor = Color.white()
  lastUpdateTime.rightAlignText()
  lastUpdateTime.textOpacity = 0.6
  lastUpdateTime.minimumScaleFactor = 0.95

  return widget;
}

Script.complete()
